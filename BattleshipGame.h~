/* cse20212, BattleshipGame.h

*/

#ifndef BATTLESHIP_H
#define BATTLESHIP_H
#include "Ship.h"
#include "Carrier.h"
#include "Battleship1.h"
#include "Destroyer.h"
#include "Submarine.h"
#include "PatrolBoat.h"
#include <iostream>
#include <vector>
#include <time.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
using namespace std;

class BattleshipGame {

	friend ostream& operator<<(ostream & output, const BattleshipGame&);

	public:
	BattleshipGame(int size=10);
	int userplaceship(Ship s, int, int, int);
	void computerplaceship(Ship s, int, int, int);
	int turn(int, int);
	int checkValid(int, int);
	char getUser(int, int) const;
	vector< vector<char> > getComputer();
	void displayUser();
	void displayComputer();
	void placeUserShips();
    	int randrow();
    	int randcol();
    	void placeComputerShips();
	void computerPlay();
	int checkLeft();
	int checkRight();
	int checkDown();
	int checkUp();
	int game();
	int isSunk(Ship s);
	int placementValid(Ship s, int, int, int);

	private:
	int boardSize;
	int spotA;
	int spotB;
	int previousPosition;
    	int compPrevRow;
    	int compPrevCol;
    	int compOnTarget;   // Was last shot a hit?
    	int compPrevHit;
    	int compNextRow;
    	int compNextCol;
    	int initialRow;
    	int initialCol;
	int shipSunk;
	int count;
	int direction;
	int value;
	int userValue;
	int computerValue;
	vector< vector<char> > userBoard;
	vector< vector<char> > computerBoard;
	Carrier carrier;
	Battleship1 battleship;
	Destroyer destroyer;
	Submarine submarine;
	PatrolBoat patrolboat;
	Carrier Ucarrier;
	Battleship1 Ubattleship;
	Destroyer Udestroyer;
	Submarine Usubmarine;
	PatrolBoat Upatrolboat;

};

#endif
